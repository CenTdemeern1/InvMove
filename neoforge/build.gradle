plugins {
    id 'com.github.johnrengelman.shadow'
}

apply plugin: 'dev.architectury.loom'

def get(prop) {
    return rootProject.project(stonecutter.current.project).property(prop)
}

loom {
    silentMojangMappingsLicense()
}

dependencies {
    minecraft "net.minecraft:minecraft:$stonecutter.current.project"
    mappings loom.officialMojangMappings()
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${get("neoforge")}"

    modApi "me.shedaniel.cloth:cloth-config-neoforge:${get("cloth_version")}"

    common(project(path: ":common:$stonecutter.current.project", configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ":common:$stonecutter.current.project", configuration: 'transformProductionNeoForge')
}

processResources {
    def props = [
            "id"              : get("id"),
            "name"            : get("display_name"),
            "description"     : get("description"),
            "author"          : get("author"),
            "license"         : get("license"),
            "repo"            : get("repo"),
            "version"         : project.version,
            "minecraftVersion": stonecutter.current.project,
            "neoForgeVersion" : get("neoforge"),
            "cloth_major"     : get("cloth_version").split('\\.')[0],
    ]

    inputs.properties props
    filesMatching("META-INF/neoforge.mods.toml") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
