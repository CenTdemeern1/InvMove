plugins {
    id 'com.github.johnrengelman.shadow'
}

apply plugin: 'dev.architectury.loom'

def get(prop) {
    return rootProject.project(stonecutter.current.project).property(prop)
}

loom {
    silentMojangMappingsLicense()
}

dependencies {
    minecraft "net.minecraft:minecraft:$stonecutter.current.project"
    mappings loom.officialMojangMappings()
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${get("fabric_api")}"

    modRuntimeOnly "com.terraformersmc:modmenu:${get("modmenu_version")}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${get("cloth_version")}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ":common:$stonecutter.current.project", configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ":common:$stonecutter.current.project", configuration: 'transformProductionFabric')
}

processResources {
    def props = [
            "id"              : rootProject.id,
            "name"            : rootProject.display_name,
            "description"     : rootProject.description,
            "author"          : rootProject.author,
            "license"         : rootProject.license,
            "repo"            : rootProject.repo,
            "version"         : project.version,
            "minecraftVersion": stonecutter.current.project,
            "fabricVersion"   : get("fabric_api"),
            "cloth_major"     : get("cloth_version").split('\\.')[0],
    ]

    inputs.properties props
    filesMatching("fabric.mod.json") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}